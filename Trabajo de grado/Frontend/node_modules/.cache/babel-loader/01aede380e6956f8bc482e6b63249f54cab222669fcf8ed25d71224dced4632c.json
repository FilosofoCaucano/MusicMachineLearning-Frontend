{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Willi\\\\Downloads\\\\Trabajo de grado 1\\\\MusicMachineLearning-Frontend\\\\Trabajo de grado\\\\Frontend\\\\src\\\\Components\\\\AudioUploader.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/AudioUploader.js\nimport React, { useState } from 'react';\nimport { uploadAudio, identifyInstrument } from '../Services/Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioUploader = ({\n  onResult\n}) => {\n  _s();\n  const [audioFile, setAudioFile] = useState(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    setAudioFile(file);\n  };\n  const handleUpload = async () => {\n    if (!audioFile) {\n      alert('Por favor selecciona un archivo.');\n      return;\n    }\n    setIsUploading(true);\n    try {\n      // Llama al backend para subir el archivo\n      const uploadResponse = await uploadAudio(audioFile);\n      const audioId = uploadResponse.id;\n\n      // Llama al backend para identificar el instrumento\n      const identifyResponse = await identifyInstrument(audioId);\n\n      // Pasa los resultados al componente padre\n      onResult(identifyResponse);\n    } catch (error) {\n      console.error('Error al subir o identificar el audio:', error);\n      alert('Hubo un error. Intenta nuevamente.');\n    } finally {\n      setIsUploading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"audio/wav\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: isUploading,\n      children: isUploading ? 'Procesando...' : 'Subir y Clasificar'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(AudioUploader, \"ElI/eIE8zkT/Q5Ymb/gkjH3mV4Y=\");\n_c = AudioUploader;\nexport default AudioUploader;\nvar _c;\n$RefreshReg$(_c, \"AudioUploader\");","map":{"version":3,"names":["React","useState","uploadAudio","identifyInstrument","jsxDEV","_jsxDEV","AudioUploader","onResult","_s","audioFile","setAudioFile","isUploading","setIsUploading","handleFileChange","e","file","target","files","handleUpload","alert","uploadResponse","audioId","id","identifyResponse","error","console","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Willi/Downloads/Trabajo de grado 1/MusicMachineLearning-Frontend/Trabajo de grado/Frontend/src/Components/AudioUploader.js"],"sourcesContent":["// frontend/src/components/AudioUploader.js\r\nimport React, { useState } from 'react';\r\nimport { uploadAudio, identifyInstrument } from '../Services/Api';\r\n\r\nconst AudioUploader = ({ onResult }) => {\r\n    const [audioFile, setAudioFile] = useState(null);\r\n    const [isUploading, setIsUploading] = useState(false);\r\n\r\n    const handleFileChange = (e) => {\r\n        const file = e.target.files[0];\r\n        setAudioFile(file);\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n        if (!audioFile) {\r\n            alert('Por favor selecciona un archivo.');\r\n            return;\r\n        }\r\n\r\n        setIsUploading(true);\r\n        try {\r\n            // Llama al backend para subir el archivo\r\n            const uploadResponse = await uploadAudio(audioFile);\r\n            const audioId = uploadResponse.id;\r\n\r\n            // Llama al backend para identificar el instrumento\r\n            const identifyResponse = await identifyInstrument(audioId);\r\n\r\n            // Pasa los resultados al componente padre\r\n            onResult(identifyResponse);\r\n        } catch (error) {\r\n            console.error('Error al subir o identificar el audio:', error);\r\n            alert('Hubo un error. Intenta nuevamente.');\r\n        } finally {\r\n            setIsUploading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" accept=\"audio/wav\" onChange={handleFileChange} />\r\n            <button onClick={handleUpload} disabled={isUploading}>\r\n                {isUploading ? 'Procesando...' : 'Subir y Clasificar'}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AudioUploader;\r\n\r\n\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,kBAAkB,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMY,gBAAgB,GAAIC,CAAC,IAAK;IAC5B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9BP,YAAY,CAACK,IAAI,CAAC;EACtB,CAAC;EAED,MAAMG,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAACT,SAAS,EAAE;MACZU,KAAK,CAAC,kCAAkC,CAAC;MACzC;IACJ;IAEAP,cAAc,CAAC,IAAI,CAAC;IACpB,IAAI;MACA;MACA,MAAMQ,cAAc,GAAG,MAAMlB,WAAW,CAACO,SAAS,CAAC;MACnD,MAAMY,OAAO,GAAGD,cAAc,CAACE,EAAE;;MAEjC;MACA,MAAMC,gBAAgB,GAAG,MAAMpB,kBAAkB,CAACkB,OAAO,CAAC;;MAE1D;MACAd,QAAQ,CAACgB,gBAAgB,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAC9DL,KAAK,CAAC,oCAAoC,CAAC;IAC/C,CAAC,SAAS;MACNP,cAAc,CAAC,KAAK,CAAC;IACzB;EACJ,CAAC;EAED,oBACIP,OAAA;IAAAqB,QAAA,gBACIrB,OAAA;MAAOsB,IAAI,EAAC,MAAM;MAACC,MAAM,EAAC,WAAW;MAACC,QAAQ,EAAEhB;IAAiB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpE5B,OAAA;MAAQ6B,OAAO,EAAEhB,YAAa;MAACiB,QAAQ,EAAExB,WAAY;MAAAe,QAAA,EAChDf,WAAW,GAAG,eAAe,GAAG;IAAoB;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAACzB,EAAA,CA1CIF,aAAa;AAAA8B,EAAA,GAAb9B,aAAa;AA4CnB,eAAeA,aAAa;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}