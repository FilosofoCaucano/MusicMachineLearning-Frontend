{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Willi\\\\Downloads\\\\Trabajo de grado 1\\\\MusicMachineLearning-Frontend\\\\Trabajo de grado\\\\Frontend\\\\src\\\\Components\\\\AudioUploader.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/AudioUploader.js\nimport React, { useState } from 'react';\nimport { identifyInstrument } from '../Services/Api';\nimport { Bar } from 'react-chartjs-2';\nimport './AudioUploader.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioUploader = ({\n  onInstrumentIdentified\n}) => {\n  _s();\n  const [audioFile, setAudioFile] = useState(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [results, setResults] = useState(null);\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    if (!file) {\n      setErrorMessage('Por favor selecciona un archivo.');\n      return;\n    }\n    if (!file.type.startsWith('audio/')) {\n      setErrorMessage('El archivo debe ser un archivo de audio válido.');\n      return;\n    }\n    setErrorMessage('');\n    setAudioFile(file);\n  };\n  const handleUpload = async () => {\n    if (!audioFile) {\n      setErrorMessage('Por favor selecciona un archivo antes de subir.');\n      return;\n    }\n    setIsUploading(true);\n    setErrorMessage('');\n    const formData = new FormData();\n    formData.append('file', audioFile);\n    try {\n      const response = await identifyInstrument(formData);\n      console.log('Respuesta del servidor:', response);\n      if (response.predicted_class !== undefined && response.probabilities) {\n        setResults({\n          predictedClass: response.predicted_class,\n          probabilities: response.probabilities\n        });\n      } else {\n        setErrorMessage('No se encontraron resultados en la respuesta del servidor.');\n      }\n    } catch (error) {\n      console.error('Error al subir el archivo:', error);\n      setErrorMessage('Hubo un error procesando el archivo.');\n    } finally {\n      setIsUploading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-uploader\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: isUploading,\n      children: isUploading ? 'Procesando...' : 'Subir y Clasificar'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 30\n    }, this), results && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Clase Predicha: \", results.predictedClass]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        data: {\n          labels: results.probabilities.map((_, i) => `Clase ${i}`),\n          datasets: [{\n            label: 'Probabilidades',\n            data: results.probabilities,\n            backgroundColor: 'rgba(75,192,192,0.6)'\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(AudioUploader, \"L6+GP0Khf5P5j3I3UrIg65ujUUw=\");\n_c = AudioUploader;\nexport default AudioUploader;\nvar _c;\n$RefreshReg$(_c, \"AudioUploader\");","map":{"version":3,"names":["React","useState","identifyInstrument","Bar","jsxDEV","_jsxDEV","AudioUploader","onInstrumentIdentified","_s","audioFile","setAudioFile","isUploading","setIsUploading","errorMessage","setErrorMessage","results","setResults","handleFileChange","e","file","target","files","type","startsWith","handleUpload","formData","FormData","append","response","console","log","predicted_class","undefined","probabilities","predictedClass","error","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","data","labels","map","_","i","datasets","label","backgroundColor","options","scales","y","beginAtZero","_c","$RefreshReg$"],"sources":["C:/Users/Willi/Downloads/Trabajo de grado 1/MusicMachineLearning-Frontend/Trabajo de grado/Frontend/src/Components/AudioUploader.js"],"sourcesContent":["// frontend/src/components/AudioUploader.js\r\nimport React, { useState } from 'react';\r\nimport { identifyInstrument } from '../Services/Api';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport './AudioUploader.css';\r\n\r\nconst AudioUploader = ({ onInstrumentIdentified }) => {\r\n    const [audioFile, setAudioFile] = useState(null);\r\n    const [isUploading, setIsUploading] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [results, setResults] = useState(null);\r\n\r\n    const handleFileChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if (!file) {\r\n            setErrorMessage('Por favor selecciona un archivo.');\r\n            return;\r\n        }\r\n        if (!file.type.startsWith('audio/')) {\r\n            setErrorMessage('El archivo debe ser un archivo de audio válido.');\r\n            return;\r\n        }\r\n        setErrorMessage('');\r\n        setAudioFile(file);\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n        if (!audioFile) {\r\n            setErrorMessage('Por favor selecciona un archivo antes de subir.');\r\n            return;\r\n        }\r\n\r\n        setIsUploading(true);\r\n        setErrorMessage('');\r\n\r\n        const formData = new FormData();\r\n        formData.append('file', audioFile);\r\n\r\n        try {\r\n            const response = await identifyInstrument(formData);\r\n            console.log('Respuesta del servidor:', response);\r\n\r\n            if (response.predicted_class !== undefined && response.probabilities) {\r\n                setResults({\r\n                    predictedClass: response.predicted_class,\r\n                    probabilities: response.probabilities,\r\n                });\r\n            } else {\r\n                setErrorMessage('No se encontraron resultados en la respuesta del servidor.');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error al subir el archivo:', error);\r\n            setErrorMessage('Hubo un error procesando el archivo.');\r\n        } finally {\r\n            setIsUploading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"audio-uploader\">\r\n            <input type=\"file\" onChange={handleFileChange} />\r\n            <button onClick={handleUpload} disabled={isUploading}>\r\n                {isUploading ? 'Procesando...' : 'Subir y Clasificar'}\r\n            </button>\r\n            {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n            {results && (\r\n                <div className=\"results\">\r\n                    <h3>Clase Predicha: {results.predictedClass}</h3>\r\n                    <Bar\r\n                        data={{\r\n                            labels: results.probabilities.map((_, i) => `Clase ${i}`),\r\n                            datasets: [\r\n                                {\r\n                                    label: 'Probabilidades',\r\n                                    data: results.probabilities,\r\n                                    backgroundColor: 'rgba(75,192,192,0.6)',\r\n                                },\r\n                            ],\r\n                        }}\r\n                        options={{\r\n                            scales: {\r\n                                y: { beginAtZero: true },\r\n                            },\r\n                        }}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AudioUploader;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}