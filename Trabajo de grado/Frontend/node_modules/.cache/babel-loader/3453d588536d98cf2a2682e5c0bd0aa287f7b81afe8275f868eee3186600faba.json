{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Willi\\\\Downloads\\\\Trabajo de grado 1\\\\MusicMachineLearning-Frontend\\\\Trabajo de grado\\\\Frontend\\\\src\\\\Components\\\\AudioUploader.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/AudioUploader.js\nimport React, { useState } from 'react';\nimport { uploadAudio, identifyInstrument } from '../Services/Api';\nimport './AudioUploader.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioUploader = ({\n  onInstrumentIdentified\n}) => {\n  _s();\n  const [audioFile, setAudioFile] = useState(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [progress, setProgress] = useState(0); // Para barra de progreso\n\n  // Manejar selección de archivo\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    if (!file) {\n      setErrorMessage('Selecciona un archivo.');\n      return;\n    }\n    if (!file.type.startsWith('audio/')) {\n      setErrorMessage('El archivo debe ser un archivo de audio válido.');\n      return;\n    }\n    if (file.size > 10 * 1024 * 1024) {\n      // Máximo 10 MB\n      setErrorMessage('El archivo es demasiado grande (máximo 10 MB).');\n      return;\n    }\n    setErrorMessage('');\n    setAudioFile(file);\n  };\n\n  // Manejar subida y análisis\n  const handleUpload = async () => {\n    if (!audioFile) {\n      setErrorMessage('Por favor selecciona un archivo antes de subir.');\n      return;\n    }\n    setIsUploading(true);\n    setProgress(30); // Inicia el progreso\n    setErrorMessage('');\n    try {\n      const uploadResponse = await uploadAudio(audioFile); // Subir audio\n      setProgress(70);\n      const audioId = uploadResponse.id; // ID del archivo en la respuesta\n      const identifyResponse = await identifyInstrument(audioId); // Identificar instrumento\n      setProgress(100);\n      onInstrumentIdentified(identifyResponse); // Pasar los resultados al padre\n    } catch (error) {\n      console.error('Error subiendo o identificando el audio:', error);\n      setErrorMessage('Error al procesar el archivo. Intenta nuevamente.');\n    } finally {\n      setIsUploading(false);\n      setProgress(0); // Reinicia el progreso\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-uploader\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      className: \"custom-file-input\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"andean-button\",\n      onClick: handleUpload,\n      disabled: isUploading,\n      children: isUploading ? 'Procesando...' : 'Clasificar'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), progress > 0 && /*#__PURE__*/_jsxDEV(\"progress\", {\n      value: progress,\n      max: \"100\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 30\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(AudioUploader, \"zaI4tzhGk6qiqq7WPVqgNqbEqyE=\");\n_c = AudioUploader;\nexport default AudioUploader;\nvar _c;\n$RefreshReg$(_c, \"AudioUploader\");","map":{"version":3,"names":["React","useState","uploadAudio","identifyInstrument","jsxDEV","_jsxDEV","AudioUploader","onInstrumentIdentified","_s","audioFile","setAudioFile","isUploading","setIsUploading","errorMessage","setErrorMessage","progress","setProgress","handleFileChange","e","file","target","files","type","startsWith","size","handleUpload","uploadResponse","audioId","id","identifyResponse","error","console","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","value","max","_c","$RefreshReg$"],"sources":["C:/Users/Willi/Downloads/Trabajo de grado 1/MusicMachineLearning-Frontend/Trabajo de grado/Frontend/src/Components/AudioUploader.js"],"sourcesContent":["// frontend/src/components/AudioUploader.js\r\nimport React, { useState } from 'react';\r\nimport { uploadAudio, identifyInstrument } from '../Services/Api';\r\nimport './AudioUploader.css';\r\n\r\nconst AudioUploader = ({ onInstrumentIdentified }) => {\r\n    const [audioFile, setAudioFile] = useState(null);\r\n    const [isUploading, setIsUploading] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [progress, setProgress] = useState(0); // Para barra de progreso\r\n\r\n    // Manejar selección de archivo\r\n    const handleFileChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if (!file) {\r\n            setErrorMessage('Selecciona un archivo.');\r\n            return;\r\n        }\r\n        if (!file.type.startsWith('audio/')) {\r\n            setErrorMessage('El archivo debe ser un archivo de audio válido.');\r\n            return;\r\n        }\r\n        if (file.size > 10 * 1024 * 1024) { // Máximo 10 MB\r\n            setErrorMessage('El archivo es demasiado grande (máximo 10 MB).');\r\n            return;\r\n        }\r\n        setErrorMessage('');\r\n        setAudioFile(file);\r\n    };\r\n\r\n    // Manejar subida y análisis\r\n    const handleUpload = async () => {\r\n        if (!audioFile) {\r\n            setErrorMessage('Por favor selecciona un archivo antes de subir.');\r\n            return;\r\n        }\r\n\r\n        setIsUploading(true);\r\n        setProgress(30); // Inicia el progreso\r\n        setErrorMessage('');\r\n        try {\r\n            const uploadResponse = await uploadAudio(audioFile); // Subir audio\r\n            setProgress(70);\r\n            const audioId = uploadResponse.id; // ID del archivo en la respuesta\r\n            const identifyResponse = await identifyInstrument(audioId); // Identificar instrumento\r\n            setProgress(100);\r\n            onInstrumentIdentified(identifyResponse); // Pasar los resultados al padre\r\n        } catch (error) {\r\n            console.error('Error subiendo o identificando el audio:', error);\r\n            setErrorMessage('Error al procesar el archivo. Intenta nuevamente.');\r\n        } finally {\r\n            setIsUploading(false);\r\n            setProgress(0); // Reinicia el progreso\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"audio-uploader\">\r\n            <input type=\"file\" className=\"custom-file-input\" onChange={handleFileChange} />\r\n            <button className=\"andean-button\" onClick={handleUpload} disabled={isUploading}>\r\n                {isUploading ? 'Procesando...' : 'Clasificar'}\r\n            </button>\r\n            {progress > 0 && <progress value={progress} max=\"100\" />}\r\n            {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AudioUploader;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}